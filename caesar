#include <stdio.h>
#include <math.h>
#include <cs50.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

char cypher(string plaintext);
int caesar_key;

int main(int argc, string argv[])
{
    int x;
    if (argc == 2) // Checks if there are only two arguments in command line

    {
        int key = atoi(argv[1]); // set second argument as the key

        for (int i = 0; i < strlen(argv[1]); i++) // reads through the key, if it detects anything but a number, set x = 1, if number, x = 0
        {
            int word = argv[1][i];

            if (word < 48 || word > 57)
            {
                x = 1;
            }

            else
            {
                x = 0;
            }

        }

        if (key == 0) // if digit is 0, invalid
        {
            printf("Usage: ./caesar key\n");
            exit(1);
        }

        else if (x == 1) // x is 1 which means it detected a letter, invalid
        {
            printf("Usage: ./caesar key\n");
            exit(1);
        }

        else if (x == 0) // x is 0 so second argument are all digits
        {
            caesar_key = key; // set key as caesar key
            string plaintext = get_string("plaintext: "); // gets the sentence or word to be decoded
            
            cypher(plaintext); // initiate cypher function, line 61

        }
    }

    else if (argc > 2 || argc == 1)
    {
        printf("Usage: ./caesar key\n");
        exit(1);
    }
}

char cypher(string plaintext) // Processes plaintext to ciphertext
{
    int x = strlen(plaintext);
    int letters_arr[x]; // Ciphertext
    
    printf("ciphertext: ");
    
    for (int i = 0; i < x; i++)
    {
        if (plaintext[i] >= 'a' && plaintext[i] <= 'z') // if its lower case, process through this if statement
        {
            int text_lower_ascii = plaintext[i];

            letters_arr[i] = (((text_lower_ascii - 97) + caesar_key) % 26) + 97;

        }

        else if (plaintext[i] >= 'A' && plaintext[i] <= 'Z') // if its upper case, process through this if statement
        {
            int text_upper_ascii = plaintext[i];

            letters_arr[i] = (((text_upper_ascii - 65) + caesar_key) % 26) + 65;
        }
        
        else // if its not a letter, preserve
        {
            letters_arr[i] = plaintext[i];
        }
        
        printf("%c", letters_arr[i]);
    }
    
    for (int l = 0;
         l < x; l++) // if it reaches the end of the array, set null for the computer to know its the end of the array (string)
    {
        if (l + 1 == x)
        {
            letters_arr[x - 1] = '\0';
            printf("\n");
        }
    }
    return 0;
}
